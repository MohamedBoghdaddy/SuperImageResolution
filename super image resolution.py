# -*- coding: utf-8 -*-
"""imgproj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13O2d5FR_P5jsszhRnNUBVVTQ17VY5Z4t
"""

import numpy as np
import cv2
from PIL import Image, ImageFilter
from google.colab.patches import cv2_imshow
from IPython.display import display, Image as IPImage



def upscale_image_average(low_res_image, scale_factor):
    # Convert the image to a NumPy array
    low_res_array = np.array(low_res_image)

    # Calculate the dimensions of the high-resolution image
    new_height = low_res_array.shape[0] * scale_factor
    new_width = low_res_array.shape[1] * scale_factor

    # Initialize an array for the high-resolution image
    high_res_array = np.zeros((new_height, new_width, low_res_array.shape[2]), dtype=np.uint8)

    # Resize using LANCZOS filter for better quality
    high_res_image = low_res_image.resize((new_width, new_height), Image.LANCZOS)

    # Apply a mild Gaussian blur to mitigate potential artifacts
    high_res_image = high_res_image.filter(ImageFilter.GaussianBlur(radius=0.5))

    # Perform the average interpolation
    for i in range(new_height):
        for j in range(new_width):
            start_i, end_i = i // scale_factor, min((i // scale_factor) + 1, low_res_array.shape[0] - 1)
            start_j, end_j = j // scale_factor, min((j // scale_factor) + 1, low_res_array.shape[1] - 1)

            # Extract the block from the low-resolution image
            block = low_res_array[start_i:end_i + 1, start_j:end_j + 1, :]

            # Calculate the average value for each channel
            average_values = np.mean(block, axis=(0, 1))

            # Assign the average values to the corresponding pixels in the high-resolution image
            high_res_array[i, j, :] = np.round(average_values).astype(np.uint8)

    # Convert the NumPy array back to an image
    high_res_image = Image.fromarray(high_res_array)

    return high_res_image

try:
    # Load your low-resolution image
    low_res_image = Image.open('low_res_image.jpg')  # Replace with the actual path to your low-res image

    # Set the desired scale factor for upscaling
    scale_factor = 5

    # Upscale the image using the average interpolation method
    high_res_image = upscale_image_average(low_res_image, scale_factor)

    # Save or display the high-resolution image
    high_res_image.save('High_PIX.jpg')  # Replace with the desired output path

    # Display the high-resolution image
    display(IPImage(filename='High_PIX.jpg'))

except Exception as e:
    print(f"Error: {e}")